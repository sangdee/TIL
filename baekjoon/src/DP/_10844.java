package DP;

import java.math.BigInteger;
import java.util.Scanner;

/**
 * @author : Sangji Lee
 * @see : https://github.com/sangji11
 * @since : 2021-02-16
 */
public class _10844 {
    //45656이란 수를 보자.
    //
    //이 수는 인접한 모든 자리수의 차이가 1이 난다. 이런 수를 계단 수라고 한다.
    //
    //세준이는 수의 길이가 N인 계단 수가 몇 개 있는지 궁금해졌다.
    //
    //N이 주어질 때, 길이가 N인 계단 수가 총 몇 개 있는지 구하는 프로그램을 작성하시오. (0으로 시작하는 수는 없다.)

    //첫째 줄에 N이 주어진다. N은 1보다 크거나 같고, 100보다 작거나 같은 자연수이다.
    //첫째 줄에 정답을 1,000,000,000으로 나눈 나머지를 출력한다.
    public static void main(String[] args) {
        int n = new Scanner(System.in).nextInt();
        BigInteger[][] dp = new BigInteger[101][10];

        for (int i = 0; i < 10; i++) {
            dp[1][i] = new BigInteger("1");
        }

        for (int i = 2; i <= n; i++) {
            for (int j = 0; j < 10; j++) {
                if (j == 0)
                    dp[i][j] = dp[i - 1][j + 1];
                else if (j == 9)
                    dp[i][j] = dp[i - 1][j - 1];
                else
                    dp[i][j] = (dp[i - 1][j - 1].add(dp[i - 1][j + 1]));
            }

        }

        BigInteger result = new BigInteger("0");
        for (int i = 1; i < 10; i++) {
            result = result.add(dp[n][i]);
        }

        System.out.println(result.remainder(new BigInteger("1000000000")));
    }
    //    1 2 3 4 5

    //0   1 1 2 3
    //1   1 2 3 6
    //2   1 2 4 7
    //3   1 2 4 8
    //4   1 2 4 8
    //    ..
    //7   1 2 4 7
    //8   1 2 3 6
    //9   1 1 2 3 6


    // 1
    // 2
    // 3
    // 4
    // 5                                                            9
    // 6
    // 7
    // 8
    // 9         2의 0승


    // 10 12        dp[2][1]
    // 21 23        dp[2][2]
    // 32 34        dp[2][3]
    // 43 45        dp[2][4]
    // 54 56
    //..                                                            17
    // 87 89
    // 98           dp[2][9]


    // 101 121 123          dp[3][1]  3
    // 210 212 232 234      dp[3][2]  4 * 6 + 3 + 2                 32
    // 321 323 343 345      dp[3][3]
    // 432 434 454 456
    //..
    // 876 878 898
    // 987 989              dp[3][9]


    // 1010 1012 1210 1212 1232 1234                6
    // 2101 2121 2123 2321 2323 2343 2345           7
    // 3210 3212 3232 3234 3432 3435 3454 3456      48         48 + 13 61
    // 4321 4323 4343 4345 4543 4545 4565 4567      6 4
    // ..
    // 8765 8767 8787 8789 8987 8989
    // 9876 9878 9898

    //9 17 32 61


    //
    // 16
    // 10101 10121
    //..
    //98765 98767 98787 98789 98987 98989
}
