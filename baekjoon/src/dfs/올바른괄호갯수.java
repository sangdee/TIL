package dfs;

/**
 * @author : Sangji Lee
 * @see : https://github.com/sangdee
 * @since : 2021-05-27
 */
public class 올바른괄호갯수 {
    /**
     * n	result
     * 2	2
     * 3	5
     * 입출력 예 설명
     * 입출력 예 #1
     * 2개의 괄호쌍으로 [ "(())", "()()" ]의 2가지를 만들 수 있습니다.
     * 입출력 예 #2
     * 3개의 괄호쌍으로
     * [ "((()))", "(()())", "(())()", "()(())", "()()()" ]의 5가지를 만들 수 있습니다.
     * <p>
     * 우리는 n쌍의 괄호가 만든 모든 가능한 모든 괄호 형태의 개수를 Cn 이라 쓰고 이 를 카타란수(Catalan Numbers)라 부른다. 우리는 C0 = 0으로 정의하였다. 따라서 처음 4개의 카타란수는 다음과 같다
     * C0 = 1, C1 = 1, C2 = 2, C3 = 5
     * <p>
     * [C4를 구하는 방법]
     * <p>
     * 전제 : 왼쪽 끝에 한 쌍의 () 괄호를 두고, 이 괄호의 안과 밖을 생각해서 계산
     * <p>
     * 1단계. 왼쪽 끝 한 쌍의 괄호 () 안에는 없고, 오른쪽에 괄호 3쌍 두기
     * () {3쌍의 괄호}   = 경우의 수 C0*C3
     * <p>
     * 2단계. 왼쪽 끝 한 쌍의 괄호 () 안에 1쌍의 괄호를 넣고, 오른쪽에 2쌍 두기
     * ({1쌍의 괄호}) {2쌍의 괄호}   = 경우의 수 C1*C2
     * <p>
     * 3단계. 왼쪽 끝 한 쌍의 괄호 () 안에 2쌍의 괄호를 넣고, 오른쪽에 1쌍 두기
     * ({2쌍의 괄호}) {1쌍의 괄호} = 경우의 수 C2*C1
     * <p>
     * 4단계. 왼쪽 끝 한 쌍의 괄호 () 안에 3쌍의 괄호를 넣고, 오른쪽에 0쌍 두기
     * ({3쌍의 괄호})  = 경우의 수 C3*C0
     * <p>
     * <p>
     * 결론적으로 C4 = C0*C3 + C1*C2 + C2*C1 + C3*C0 = 5+2+2+5 = 14
     */
    public int solution(int n) {
        int[] dp = new int[n+1];

        dp[0] = 1;
        dp[1] = 1;

        for(int i = 2; i<=n; i++){
            for(int j=1; j<=i; j++){
                dp[i] += dp[i-j] * dp[j-1];
            }
        }

        return dp[n];
    }
}
